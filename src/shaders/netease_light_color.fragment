// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code

#endif


uniform vec3 LIGHT_POS0;
uniform vec3 CAMERA_POS;

varying vec3 WorldPos;
varying vec3 Normal;
varying vec4 Color;

const vec3 LightColor = vec3(1.0, 1.0, 1.0);

void main()
{
	// ambient
	float ambientStrength = 0.3;
	vec3 ambient = ambientStrength * LightColor;
	
	// diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(LIGHT_POS0 - WorldPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * LightColor;

	//specular
	float specularStrength = 0.5;
	vec3 viewDir = normalize(CAMERA_POS - WorldPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * LightColor;

	vec3 result = (ambient + diffuse) * vec3(Color) + specular;
	gl_FragColor = vec4(result, Color.a);
}