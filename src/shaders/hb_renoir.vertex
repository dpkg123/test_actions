// __multiversion__
// This shader is from the Gameface library modified to work in the
// Bedrock engine and heavily depends on Gameface's functionality, why
// some numbers and values seem arbitrary or "magic".

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture

#if __VERSION__ >= 300
#define attribute in
#define varying out

#else


#endif



#ifndef _UNIFORM_UI_TRANSFORMS_CONSTANTS_H
#define _UNIFORM_UI_TRANSFORMS_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform UITransformsConstants {
#endif
// BEGIN_UNIFORM_BLOCK(UITransformsConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM highp mat4 TRANSFORM;
END_UNIFORM_BLOCK

#endif

#ifndef _UNIFORM_UI_RENOIR_SHADER_VS_CONSTANTS_H
#define _UNIFORM_UI_RENOIR_SHADER_VS_CONSTANTS_H



#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 4) uniform UIRenoirShaderVSConstants {
#endif
// BEGIN_UNIFORM_BLOCK(UIRenoirShaderVSConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM highp mat4 COORD_TRANSFORM;
UNIFORM highp vec4 RENOIR_SHADER_VS_PROPS_0;
END_UNIFORM_BLOCK

#endif


attribute highp vec3 HB_POSITION;
attribute vec4 HB_COLOR;
attribute vec4 HB_ADDITIONAL;

varying vec4 ColorOut;
varying vec4 AdditionalOut;
varying vec3 ScreenNormalPosition;
varying vec4 VaryingParam0;
varying vec4 VaryingParam1;

#define USE_ADDITIONAL_COORDS 2.0

void main() {
	vec4 outPos = vec4(HB_POSITION, 1.0) * TRANSFORM;
	ScreenNormalPosition = HB_POSITION.xyz;

	vec4 coords = vec4(HB_POSITION, 1.0);
	if (HB_ADDITIONAL.z == USE_ADDITIONAL_COORDS) {
		coords = vec4(HB_ADDITIONAL.xy, 0.0, 1.0);
	}
	VaryingParam0 = coords * COORD_TRANSFORM;

	VaryingParam1.x = HB_POSITION.x * RENOIR_SHADER_VS_PROPS_0.x + RENOIR_SHADER_VS_PROPS_0.z;
	VaryingParam1.y = HB_POSITION.y * RENOIR_SHADER_VS_PROPS_0.y + RENOIR_SHADER_VS_PROPS_0.w;

	// Translate to -1..1 with perspective correction
	float w = outPos.w;
	outPos.x = outPos.x * 2.0 - w;
	outPos.y = (w - outPos.y) * 2.0 - w;

	ColorOut = HB_COLOR;
	AdditionalOut = HB_ADDITIONAL;

	gl_Position = outPos;
}
