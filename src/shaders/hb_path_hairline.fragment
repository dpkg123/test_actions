// __multiversion__
// This shader is from the Gameface library modified to work in the
// Bedrock engine and heavily depends on Gameface's functionality, why
// some numbers and values seem arbitrary or "magic".

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code

#endif


#ifndef _UNIFORM_UI_STANDARD_PRIMITIVE_PIXEL_CONSTANTS_H
#define _UNIFORM_UI_STANDARD_PRIMITIVE_PIXEL_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 4) uniform UIStandardPrimitivePixelConstants {
#endif
// BEGIN_UNIFORM_BLOCK(UIStandardPrimitivePixelConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM int SHADER_TYPE;
END_UNIFORM_BLOCK

#endif

#ifndef _UNIFORM_UI_STANDARD_PRIMITIVE_ADDITIONAL_PIXEL_CONSTANTS_H
#define _UNIFORM_UI_STANDARD_PRIMITIVE_ADDITIONAL_PIXEL_CONSTANTS_H



#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 5) uniform UIStandardPrimitiveAdditionalPixelConstants {
#endif
// BEGIN_UNIFORM_BLOCK(UIStandardPrimitiveAdditionalPixelConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 PRIM_PROPS_0;
UNIFORM vec4 PRIM_PROPS_1;
END_UNIFORM_BLOCK

#endif


varying vec2 ExtraParams;

void main() {
	if (SHADER_TYPE == 14) {
		// Hairline quads
#if defined(NO_DERIVATIVES)
		gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);
#else
		vec2 px = dFdx(ExtraParams);
		vec2 py = dFdy(ExtraParams);

		float fx = (2.0 * ExtraParams.x) * px.x - px.y;
		float fy = (2.0 * ExtraParams.x) * py.x - py.y;

		float edgeAlpha = (ExtraParams.x * ExtraParams.x - ExtraParams.y);
		float sd = sqrt((edgeAlpha * edgeAlpha) / (fx * fx + fy * fy));

		float alpha = 1.0 - sd;

		gl_FragColor = PRIM_PROPS_0 * PRIM_PROPS_1.x * alpha;
#endif
	}
	else {
		// Hairline lines
		gl_FragColor = PRIM_PROPS_0 * min(1.0, (1.0 - abs(ExtraParams.y * PRIM_PROPS_1.y - PRIM_PROPS_1.z)) * PRIM_PROPS_1.x);
	}
}
