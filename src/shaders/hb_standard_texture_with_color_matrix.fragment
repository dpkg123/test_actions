// __multiversion__
// This shader is from the Gameface library modified to work in the
// Bedrock engine and heavily depends on Gameface's functionality, why
// some numbers and values seem arbitrary or "magic".

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code

#endif


#ifndef _UNIFORM_UI_EFFECTS_PIXEL_CONSTANTS_H
#define _UNIFORM_UI_EFFECTS_PIXEL_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform UIEffectsPixelConstants {
#endif
// BEGIN_UNIFORM_BLOCK(UIEffectsPixelConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 COEFFICIENTS[3];
UNIFORM vec4 PIXEL_OFFSETS[6];
END_UNIFORM_BLOCK

#endif


varying vec4 ColorOut;
varying vec4 AdditionalOut;
// We need this here even if we do not use it as some drivers require
// the verying variables to match between the vertex and fragment shaders.
varying vec3 ScreenNormalPosition;

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

void main() {
	vec4 baseColor = texture2D(TEXTURE_0, AdditionalOut.xy);
	float nonZeroAlpha = max(baseColor.a, 0.00001);
	baseColor = vec4(baseColor.rgb / nonZeroAlpha, nonZeroAlpha);
	// TODO: Rename the members of the constant buffer so they are not weird for non-blurs
	vec4 finalColor;
	finalColor.r = dot(baseColor, vec4(COEFFICIENTS[0].x, COEFFICIENTS[0].y, COEFFICIENTS[0].z, COEFFICIENTS[0].w));
	finalColor.g = dot(baseColor, vec4(COEFFICIENTS[1].x, COEFFICIENTS[1].y, COEFFICIENTS[1].z, COEFFICIENTS[1].w));
	finalColor.b = dot(baseColor, vec4(COEFFICIENTS[2].x, COEFFICIENTS[2].y, COEFFICIENTS[2].z, COEFFICIENTS[2].w));
	finalColor.a = dot(baseColor, vec4(PIXEL_OFFSETS[0].x, PIXEL_OFFSETS[0].y, PIXEL_OFFSETS[0].z, PIXEL_OFFSETS[0].w));
	finalColor += vec4(PIXEL_OFFSETS[1].x, PIXEL_OFFSETS[1].y, PIXEL_OFFSETS[1].z, PIXEL_OFFSETS[1].w);
	finalColor.rgb *= finalColor.a;
	finalColor.rgba *= ColorOut.a;
	gl_FragColor = finalColor;
}
