// __multiversion__
// This shader is from the Gameface library modified to work in the
// Bedrock engine and heavily depends on Gameface's functionality, why
// some numbers and values seem arbitrary or "magic".

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

// version 300 code

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code

#endif


#ifndef _UNIFORM_UI_STANDARD_PRIMITIVE_ADDITIONAL_PIXEL_CONSTANTS_H
#define _UNIFORM_UI_STANDARD_PRIMITIVE_ADDITIONAL_PIXEL_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 5) uniform UIStandardPrimitiveAdditionalPixelConstants {
#endif
// BEGIN_UNIFORM_BLOCK(UIStandardPrimitiveAdditionalPixelConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 PRIM_PROPS_0;
UNIFORM vec4 PRIM_PROPS_1;
END_UNIFORM_BLOCK

#endif


varying vec4 ColorOut;
varying vec4 AdditionalOut;
// We need this here even if we do not use it as some drivers require
// the verying variables to match between the vertex and fragment shaders.
varying vec3 ScreenNormalPosition;

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

void main() {
	vec2 uvPoint = AdditionalOut.xy;
	if ((PRIM_PROPS_1.z != (-1.0)) || (PRIM_PROPS_1.w != (-1.0)))
	{
		uvPoint.x = clamp(AdditionalOut.x, PRIM_PROPS_1.x, PRIM_PROPS_1.x + PRIM_PROPS_1.z);
		uvPoint.y = clamp(AdditionalOut.y, 1.0 - (PRIM_PROPS_1.y + PRIM_PROPS_1.w), 1.0 - PRIM_PROPS_1.y);
	}

	vec4 outColor = texture2D(TEXTURE_0, uvPoint);
	outColor.w = mix(1.0 - outColor.w, outColor.w, ColorOut.x);
	float alpha = ColorOut.w * clamp(AdditionalOut.z, 0.0, 1.0);
	gl_FragColor = outColor * alpha;
}
