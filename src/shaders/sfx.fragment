// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture

#ifndef _UNIFORM_EXTRA_VECTOR_CONSTANTS_H
#define _UNIFORM_EXTRA_VECTOR_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
layout(binding = 1) uniform SfxConstants {
#endif
// BEGIN_UNIFORM_BLOCK(SfxConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 EXTRA_VECTOR1;
UNIFORM vec4 EXTRA_VECTOR2;
UNIFORM vec4 EXTRA_VECTOR3;
UNIFORM vec4 EXTRA_VECTOR4;
UNIFORM vec4 SUN_DIR;
UNIFORM vec4 WATER_TEXTURE_UV_RANGE;
UNIFORM vec4 SKY_NEAR_COLOR;
UNIFORM vec4 SKY_FAR_COLOR;
UNIFORM vec4 RAIN_NEAR_COLOR;
UNIFORM vec4 RAIN_FAR_COLOR;
UNIFORM vec4 COLOR_MAPPING_PARAM;
END_UNIFORM_BLOCK

#endif


#if __VERSION__ >= 300
	// version 300 code

	#ifdef MSAA_FRAMEBUFFER_ENABLED
		#define _centroid centroid
	#else
		#define _centroid
	#endif

	_centroid in vec2 uv;

	#define varying in
	#define texture2D texture
	out vec4 FragColor;
	#define gl_FragColor FragColor

#else

	// version 100 code
	varying vec2 uv;

#endif

uniform sampler2D TEXTURE_0;

#ifdef ALPHA_TEST
//mat4 thresholdMatrix = mat4(  // column major
//	 1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
//	13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
//	 4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
//	16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0);
#endif

vec2 calculateUV() {
	vec2 SFX_UV_OFFSET = EXTRA_VECTOR1.xy;
	vec2 SFX_UV_SCALE = EXTRA_VECTOR1.zw;
	vec2 SFX_UV_REPEAT = EXTRA_VECTOR2.xy;

	vec2 ret = uv * SFX_UV_REPEAT;  // uv<0 did happen on some devices
	ret = mix(ret, mod(ret, 1.0), float(ret.x > 1.0 || ret.y > 1.0));

	ret *= SFX_UV_SCALE;

	return ret + SFX_UV_OFFSET;
}

void main()
{
	vec2 uv_calculated = calculateUV();
	vec4 color_calculated = texture2D(TEXTURE_0, uv_calculated);

#ifdef ALPHA_TEST
	vec2 alpha_thresh = EXTRA_VECTOR2.zw;
	if (color_calculated.a < alpha_thresh.s || color_calculated.a > alpha_thresh.t)
		discard;

	//ivec2 coord = ivec2(gl_FragCoord.xy - floor(gl_FragCoord.xy * 0.25) * 4.0);
	//if (color_calculated.a * EXTRA_VECTOR3.a < thresholdMatrix[0][coord.x*4+coord.y])
	//	discard;
#endif

	vec4 SFX_MIX_COLOR = EXTRA_VECTOR3;
	gl_FragColor = color_calculated * SFX_MIX_COLOR;
}