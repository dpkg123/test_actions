// __multiversion__
// This shader is from the Gameface library modified to work in the
// Bedrock engine and heavily depends on Gameface's functionality, why
// some numbers and values seem arbitrary or "magic".

#ifndef _UNIFORM_UI_EFFECTS_PIXEL_CONSTANTS_H
#define _UNIFORM_UI_EFFECTS_PIXEL_CONSTANTS_H

#ifndef _UNIFORM_MACRO_H
#define _UNIFORM_MACRO_H

#ifdef MCPE_PLATFORM_NX
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) uniform x {
#define END_UNIFORM_BLOCK };
#define UNIFORM 
#else
// Unfortunately this macro does not work on old Amazon platforms #define BEGIN_UNIFORM_BLOCK(x) 
#define END_UNIFORM_BLOCK
#define UNIFORM uniform 
#endif

#if __VERSION__ >= 420
#define LAYOUT_BINDING(x) layout(binding = x)
#else
#define LAYOUT_BINDING(x) 
#endif

#endif


#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 3) uniform UIEffectsPixelConstants {
#endif
// BEGIN_UNIFORM_BLOCK(UIEffectsPixelConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 COEFFICIENTS[3];
UNIFORM vec4 PIXEL_OFFSETS[6];
END_UNIFORM_BLOCK

#endif

// To use centroid sampling we need to have version 300 es shaders, which requires changing:
// attribute to in
// varying to out when in vertex shaders or in when in fragment shaders
// defining an out vec4 FragColor and replacing uses of gl_FragColor with FragColor
// texture2D to texture
#if __VERSION__ >= 300

#ifdef MSAA_FRAMEBUFFER_ENABLED
#define _centroid centroid
#else
#define _centroid
#endif

// version 300 code
_centroid in vec2 uv;

#define varying in
#define texture2D texture
out vec4 FragColor;
#define gl_FragColor FragColor

#else

// version 100 code
varying vec2 uv;

#endif

#ifndef _UNIFORM_UI_STANDARD_PRIMITIVE_ADDITIONAL_PIXEL_CONSTANTS_H
#define _UNIFORM_UI_STANDARD_PRIMITIVE_ADDITIONAL_PIXEL_CONSTANTS_H



#ifdef MCPE_PLATFORM_NX
#extension GL_ARB_enhanced_layouts : enable
layout(binding = 5) uniform UIStandardPrimitiveAdditionalPixelConstants {
#endif
// BEGIN_UNIFORM_BLOCK(UIStandardPrimitiveAdditionalPixelConstants) - unfortunately this macro does not work on old Amazon platforms so using above 3 lines instead
UNIFORM vec4 PRIM_PROPS_0;
UNIFORM vec4 PRIM_PROPS_1;
END_UNIFORM_BLOCK

#endif


varying vec4 ColorOut;
varying vec4 AdditionalOut;
// We need this here even if we do not use it as some drivers require
// the verying variables to match between the vertex and fragment shaders.
varying vec3 ScreenNormalPosition;

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

void main() {
	vec4 outColor = vec4(0.0, 0.0, 0.0, 0.0);

	for (int i = 0; i < BLUR_STEPS; ++i) {
		vec4 coeffVec = COEFFICIENTS[i / 4];
		float coeff = coeffVec[int(mod(float(i), 4.0))];
		vec2 offset;
		vec4 pixelOffsetX = PIXEL_OFFSETS[(i*2) / 4];
		vec4 pixelOffsetY = PIXEL_OFFSETS[(i*2 + 1) / 4];
		offset.x = pixelOffsetX[int(mod(float(i*2), 4.0))];
		offset.y = pixelOffsetY[int(mod(float(i*2 + 1), 4.0))];

		vec2 uvPointWithOffset = vec2(AdditionalOut.x + offset.x, AdditionalOut.y - offset.y);
		vec2 uvPointWithNegativeOffset = vec2(AdditionalOut.x - offset.x, AdditionalOut.y + offset.y);

		if ((PRIM_PROPS_1.z != (-1.0)) || (PRIM_PROPS_1.w != (-1.0)))
		{
			uvPointWithOffset.x = clamp(AdditionalOut.x + offset.x, PRIM_PROPS_1.x, PRIM_PROPS_1.x + PRIM_PROPS_1.z);
			uvPointWithOffset.y = clamp(AdditionalOut.y - offset.y, 1.0 - (PRIM_PROPS_1.y + PRIM_PROPS_1.w), 1.0 - PRIM_PROPS_1.y);
			uvPointWithNegativeOffset.x = clamp(AdditionalOut.x - offset.x, PRIM_PROPS_1.x, PRIM_PROPS_1.x + PRIM_PROPS_1.z);
			uvPointWithNegativeOffset.y = clamp(AdditionalOut.y + offset.y, 1.0 - (PRIM_PROPS_1.y + PRIM_PROPS_1.w), 1.0 - PRIM_PROPS_1.y);
		}

		outColor += ((texture2D(TEXTURE_0, uvPointWithOffset) + texture2D(TEXTURE_0, uvPointWithNegativeOffset)) * coeff);
	}

	gl_FragColor = outColor * ColorOut.a;
}
